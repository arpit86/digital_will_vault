<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    					http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    					http://www.springframework.org/schema/context
    					http://www.springframework.org/schema/context/spring-context-3.2.xsd 
    					http://www.springframework.org/schema/mvc
    					http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    					http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<mvc:annotation-driven/>
	<context:component-scan base-package="com.csus.vault.web.controllers" />
	<context:component-scan base-package="com.csus.vault.web.service" />
	<context:component-scan base-package="com.csus.vault.web.dao" />
	<context:component-scan base-package="com.csus.vault.web.model" />
    
    <!-- <bean id="context" class="com.csus.vault.web.BlockChainContext"/> -->
        
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <!-- setting maximum upload size -->
		<beans:property name="maxUploadSize" value="100000" />
	</beans:bean>
    
    <!-- <beans:bean class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean" id="emf">
		<property name="persistenceUnitName" value="digitalVaultDBUnit"/>
	</beans:bean> -->
	
	<!-- This produces a container-managed EntityManagerFactory;
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <beans:bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      	<property name="dataSource" ref="dataSource" />
      	
      	<!-- This makes /META-INF/persistence.xml is no longer necessary -->
      	<property name="packagesToScan" value="com.csus.vault.web.model" />
      
      	<!-- JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface -->
      	<property name="jpaVendorAdapter">
         	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      	</property>
      	<property name="jpaProperties">
         	<props>
            	<prop key="hibernate.hbm2ddl.auto">validate</prop>
            	<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
         	</props>
      	</property>
   	</beans:bean>
  
   	<!-- Simple implementation of the standard JDBC DataSource interface,
        configuring the plain old JDBC DriverManager via bean properties -->
   	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      	<property name="driverClassName" value="com.mysql.jdbc.Driver" />
      	<property name="url" value="jdbc:mysql://localhost:3306/digitalVaultdb" />
      	<property name="username" value="shweta" />
      	<property name="password" value="Shweta1601" />
   	</bean>
     
    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access.
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      	<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   	</bean>
    
   	<!-- responsible for registering the necessary Spring components that power annotation-driven transaction management;
        such as when @Transactional methods are invoked -->
   	<tx:annotation-driven />	
</beans>